# Exception(예외(검사예외, 비검사예외))

검사예외 : 실패가 예상되는 상황에서 사용

비검사예외 : 개발자가 만든 논리오류(ex)NullPointerException)

- Class.forName(String)의 경우 클래스를 실제로 로드해보기 전에는 로드가 가능한지 알 수 없기 때문에 검사예외인 ClassNotFoundException을 던져준다.

- Integer.parseInt(String)은 비검사예외인 N# Exception(예외(검사예외, 비검사예외))

검사예외 : 실패가 예상되는 상황에서 사용

비검사예외 : 개발자가 만든 논리오류(ex)NullPointerException)

- Class.forName(String)의 경우 클래스를 실제로 로드해보기 전에는 로드가 가능한지 알 수 없기 때문에 검사예외인 ClassNotFoundException을 던져준다.

- Integer.parseInt(String)은 비검사예외인 NumberFormatException을 던져준다.

### 검사 예외 선언하기(던지기)

슈퍼클래스의 메서드에서 선언한 예외보다 더 광범위한 예외는 던질 수 없다.(슈퍼클래스의 메서드에 throws절이 없다면 서브클래스에서 예외를 던질 수 없다.)

### 예외 잡기(try-catch)

catch(핸들러)를 여러개 두는 방법에서는 가장 상세한 예외 클래스부터 먼저 배치해야 한다.

   try{
   
   } catch(예외 클래스1 ex) {
      핸들러1
   } catch(예외 클래스2 ex) {
      핸들러2
   }
   
위에 있는 catch절부터 일치항목을 찾고, 없으면 아래로 내려온다.

핸들러 하나로 여러 예외클래스 처리

   try{
   
   } catch(예외클래스1 || 예외클래스2 ||...){
      핸들러
   }
   
### try-with-resources 문

예외를 던지면 리소스의 close()가 실행되지 않을 수 있다.

try문에 resourse를 직접 작성하면 try블록이 끝날 때 예외 여부와 상관없이 자동으로 리소스를 닫는다.

### finally 절

정상적으로든 예외 때문이든 try블록이 끝날 때 실행된다.

309page 부터umberFormatException을 던져준다.

### 검사 예외 선언하기(던지기)

슈퍼클래스의 메서드에서 선언한 예외보다 더 광범위한 예외는 던질 수 없다.(슈퍼클래스의 메서드에 throws절이 없다면 서브클래스에서 예외를 던질 수 없다.)

### 예외 잡기(try-catch)

catch(핸들러)를 여러개 두는 방법에서는 가장 상세한 예외 클래스부터 먼저 배치해야 한다.

   try{
   
   } catch(예외 클래스1 ex) {
      핸들러1
   } catch(예외 클래스2 ex) {
      핸들러2
   }
   
위에 있는 catch절부터 일치항목을 찾고, 없으면 아래로 내려온다.

핸들러 하나로 여러 예외클래스 처리

   try{
   
   } catch(예외클래스1 || 예외클래스2 ||...){
      핸들러
   }
   
### try-with-resources 문

예외를 던지면 리소스의 close()가 실행되지 않을 수 있다.

try문에 resourse를 직접 작성하면 try블록이 끝날 때 예외 여부와 상관없이 자동으로 리소스를 닫는다.

### finally 절

정상적으로든 예외 때문이든 try블록이 끝날 때 실행된다.

## 단정(assert)

예외가 나올 상황을 정의해서 사용 할 수 있다.

1. assert 조건식;
2. assert 조건식 : 표현식;

1번은 조건식이 false이면 AssertionError를 던진다.
2번은 조건식이 false면 예외객체 대신 표현식에 나온 문자열이 출력된다.

	assert x >= 0;